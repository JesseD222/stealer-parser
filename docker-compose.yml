version: '3.8'

services:
  # Redis for job queue and caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL database (production)
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: stealer_parser
      POSTGRES_USER: stealer_user
      POSTGRES_PASSWORD: stealer_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U stealer_user -d stealer_parser"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - production

  # FastAPI Backend with async processing
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    ports:
      - "8000:8000"
    volumes:
      - ./logs:/app/logs
      - /tmp/stealer_uploads:/tmp/uploads
      - stealer_data:/app/data
    environment:
      - PYTHONPATH=/app
      - LOG_LEVEL=info
      - DATABASE_URL=sqlite+aiosqlite:///data/stealer_parser.db
      - REDIS_URL=redis://redis:6379
      - MAX_WORKERS=4
    depends_on:
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Background workers for processing
  workers:
    build:
      context: .
      dockerfile: Dockerfile.api
    command: python api/worker.py --workers 3
    volumes:
      - ./logs:/app/logs
      - /tmp/stealer_uploads:/tmp/uploads
      - stealer_data:/app/data
    environment:
      - PYTHONPATH=/app
      - LOG_LEVEL=info
      - DATABASE_URL=sqlite+aiosqlite:///data/stealer_parser.db
      - REDIS_URL=redis://redis:6379
    depends_on:
      - redis
      - api
    restart: unless-stopped
    deploy:
      replicas: 2

  # Performance monitor
  monitor:
    build:
      context: .
      dockerfile: Dockerfile.api
    command: python api/monitor.py --interval 30
    volumes:
      - ./logs:/app/logs
      - stealer_data:/app/data
    environment:
      - PYTHONPATH=/app
      - LOG_LEVEL=info
      - DATABASE_URL=sqlite+aiosqlite:///data/stealer_parser.db
    depends_on:
      - api
    restart: unless-stopped
    profiles:
      - monitoring

  # Next.js Frontend
  web:
    build:
      context: .
      dockerfile: Dockerfile.web
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://localhost:8000
    depends_on:
      - api
    restart: unless-stopped

  # Nginx reverse proxy with load balancing
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - web
      - api
    restart: unless-stopped
    profiles:
      - production

  # Database administration (development)
  adminer:
    image: adminer:latest
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      - postgres
    profiles:
      - development

volumes:
  redis_data:
  postgres_data:
  stealer_data:
  node_modules:

networks:
  default:
    driver: bridge